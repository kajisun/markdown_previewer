{"version":3,"sources":["App.js","initTxt.js","serviceWorker.js","index.js"],"names":["marked","setOptions","breaks","renderer","Renderer","link","href","title","text","App","props","state","markdown","editorMaximized","previewMaximized","handleChange","bind","handleEditorMaximize","handlePreviewMaximize","e","this","setState","target","value","classes","faCompress","faArrowsAlt","className","icon","onClick","onChange","React","Component","Toolbar","faFreeCodeCamp","Editor","id","type","Preview","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+UAWAA,IAAOC,WAAW,CACdC,QAAQ,IAIZ,IAAMC,EAAW,IAAIH,IAAOI,SAC5BD,EAASE,KAAO,SAACC,EAAMC,EAAOC,GAAd,yCAAmDF,EAAnD,aAA4DE,EAA5D,a,IAGVC,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,SCxBC,0rCDyBDC,iBAAiB,EACjBC,kBAAkB,GAEtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAC5B,EAAKE,sBAAwB,EAAKA,sBAAsBF,KAA3B,gBATd,E,yDAYNG,GACTC,KAAKC,SAAS,CAACT,SAAUO,EAAEG,OAAOC,U,6CAIlCH,KAAKC,SAAS,CAACR,iBAAkBO,KAAKT,MAAME,oB,8CAI5CO,KAAKC,SAAS,CAACP,kBAAmBM,KAAKT,MAAMG,qB,+BAI7C,IAAMU,EAAUJ,KAAKT,MAAME,gBACvB,CACI,uBACC,mBACAY,KAELL,KAAKT,MAAMG,iBACX,CACI,kBACA,wBACAW,KAEJ,CACI,aACA,cACAC,KAGR,OACI,6BACI,yBAAKC,UAAWH,EAAQ,IACpB,kBAAC,EAAD,CACII,KAAMJ,EAAQ,GACdK,QAAST,KAAKH,qBACdT,KAAK,WACT,kBAAC,EAAD,CAAQI,SAAUQ,KAAKT,MAAMC,SACzBkB,SAAUV,KAAKL,gBAEvB,yBAAKY,UAAU,cAEf,yBAAKA,UAAWH,EAAQ,IACpB,kBAAC,EAAD,CACII,KAAMJ,EAAQ,GACdK,QAAST,KAAKF,sBACdV,KAAK,cACT,kBAAC,EAAD,CAASI,SAAUQ,KAAKT,MAAMC,iB,GA7DhCmB,IAAMC,WAoElBC,EAAU,SAACvB,GAAD,OACZ,yBAAKiB,UAAU,WACX,kBAAC,IAAD,CAAiBA,UAAU,iBAAiBC,KAAMM,MACjDxB,EAAMF,KACP,kBAAC,IAAD,CAAiBoB,KAAMlB,EAAMkB,KAAMC,QAASnB,EAAMmB,YAGpDM,EAAS,SAACzB,GAAD,OACX,8BAAU0B,GAAG,SACTb,MAAOb,EAAME,SACbkB,SAAUpB,EAAMoB,SAChBO,KAAK,UAGPC,EAAU,SAAC5B,GAAD,OACZ,yBAAK0B,GAAG,UAAUG,wBAAyB,CAACC,OAAQxC,IAAOU,EAAME,SAAU,CAAET,SAAUA,QAG5EM,IE9FKgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c68b2013.chunk.js","sourcesContent":["import React from 'react';\nimport marked from \"marked\";\nimport \"./App.scss\";\nimport initTxt from \"./initTxt\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCompress, faArrowsAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { faFreeCodeCamp } from \"@fortawesome/free-brands-svg-icons\";\n \nconst projectName = \"markdown-previewer\";\n\n// allows line breaks with return button\nmarked.setOptions({\n    breaks: true\n})\n\n// inserts target=\"_blank\" into href tags\nconst renderer = new marked.Renderer();\nrenderer.link = (href, title, text) => `<a target=\"_blank\" href=\"${href}\">${text}</a></a>`;\n \n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            markdown: initTxt,\n            editorMaximized: false,\n            previewMaximized: false,\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleEditorMaximize = this.handleEditorMaximize.bind(this);\n        this.handlePreviewMaximize = this.handlePreviewMaximize.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({markdown: e.target.value})\n    }\n\n    handleEditorMaximize() {\n        this.setState({editorMaximized: !this.state.editorMaximized});\n    }\n\n    handlePreviewMaximize() {\n        this.setState({previewMaximized: !this.state.previewMaximized})\n    }\n\n    render() {  \n        const classes = this.state.editorMaximized ?\n            [\n                \"editorWrap maximized\",\n                 \"previewWrap hide\",\n                 faCompress\n            ] :\n            this.state.previewMaximized ?\n            [\n                \"editorWrap hide\",\n                \"previewWrap maximized\",\n                faCompress\n            ] :\n            [\n                \"editorWrap\",\n                \"previewWrap\",\n                faArrowsAlt\n            ];\n\n        return (\n            <div>\n                <div className={classes[0]}>\n                    <Toolbar\n                        icon={classes[2]}\n                        onClick={this.handleEditorMaximize}\n                        text=\"Editor\" />\n                    <Editor markdown={this.state.markdown}\n                        onChange={this.handleChange} />\n                </div>\n                <div className=\"converter\">\n                </div>\n                <div className={classes[1]}>\n                    <Toolbar \n                        icon={classes[2]}\n                        onClick={this.handlePreviewMaximize}\n                        text=\"Previewer\" />\n                    <Preview markdown={this.state.markdown} />\n                </div>\n            </div>\n        )\n    }\n}\n\nconst Toolbar = (props) => \n    <div className=\"toolbar\">\n        <FontAwesomeIcon className=\"faFreeCodeCamp\" icon={faFreeCodeCamp} /> \n        {props.text}\n        <FontAwesomeIcon icon={props.icon} onClick={props.onClick} />\n    </div>\n\nconst Editor = (props) => \n    <textarea id=\"editor\"\n        value={props.markdown}\n        onChange={props.onChange}\n        type=\"text\"  \n    /> \n\nconst Preview = (props) => \n    <div id=\"preview\" dangerouslySetInnerHTML={{__html: marked(props.markdown, { renderer: renderer })}} />\n\n\nexport default App;\n","const initTxt = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n  \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n  \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n            `;\r\nexport default initTxt;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}